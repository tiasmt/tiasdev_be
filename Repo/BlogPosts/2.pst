PostId:2
Category:technology
Title:Architecture
ImageURL:./../../images/post2/post2.jpg
Date:09/01/2021
Summary:How does it work?
Body:

## Overview 
<span style="font-size:150%; font-weight:600">T</span>he frontend is developed using Vuejs, which is a javascript framework, if you are interested in learning more have a look [here](https://vuejs.org/). While the backend is developed in [C# / .NET Core](https://docs.microsoft.com/en-us/dotnet/fundamentals/).

The current functionality implemented is basic, all we are doing is retrieving blog posts (at this point in time these are saved locally) and once a user clicks on one of the blog posts, the user is redirected to the post. 

<br>
<br>


<img style="margin-left: 15%"  src="./../../gifs/tiasdev-overview.gif" width="70%"/>

<br>
<br>

The gif shows the functionality currently implemented. The UX is made out of a navbar (left-hand) and a selection of posts along with a search bar (right-hand). The navbar consists of a number of categories that may filter the posts, this filtering is all done in the frontend (although this is not the preferred way due to the limited number of posts at this point in time it was the decision taken). The posts are currently all shown after being retrieved from the backend.

## Home View

### Frontend

The folder structure used for the frontend:

<br>
<img  src="./../../images/post2/frontend_folder_structure.jpg"/>

Components that are reused are saved within the components folder while whole page views are saved within the views folder. The Home page view is what the user sees when first entering the site while the Post page view is when reading a particular post. These are controlled via the index.js file whereby using [router](https://vuejs.org/v2/guide/routing.html) we are redirecting users to the pages we would like. 

Upon mounting we are dispatching an action to our [Vuex store](https://vuex.vuejs.org/#what-is-a-state-management-pattern) which is then calling using an HTTP request to retrieve all the posts, this is where our backend comes into play. Once these are retrieved they are displayed along with some styling we have implemented.

### Backend

The folder structure used for the backend:

<br>
<img  src="./../../images/post2/backend_folder_structure.jpg"/>

The request sent from the frontend hits an API endpoint in our BlogPostController, which in turn uses the BlogPostService to retrieve all our posts. An interesting design choice that was made early on was to use an interface for the BlogPostStorage. This is done as currently all posts are saved as files while in future this may need to be changed to be saved in some other database format. This change will be easy to implement as long as our new repo storage implements the IBlogPostStorage interface which would make the change transparent to both the BlogPostStorage and the frontend. Besides implementing the new BlogPostStorage class we would just need to use dependency injection to inject the correct storage type at start up.

## Post View

### Frontend

Upon clicking on a post, a get request for the particular post is done to our backend. The backend returns the data which is then displayed in our browser. The postview may be considered as consisting of containers whereby the title, date and content is added. The content is saved in markdown format which is then parsed to html through an [npm package](https://www.npmjs.com/package/marked).

### Backend

The backend consists of an API which is expecting the blogpost ID which to retrieve. In our current implemention we decided to use files as storage (which are then added as part of the repository), this makes it easy to update / keep track of all changes while also ease of deployment. 

Future improvments will consist of developing a dashboard where we can keep track of the number of users that are visiting while also seeing which posts are most interesting.





